// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientData.proto

#ifndef PROTOBUF_clientData_2eproto__INCLUDED
#define PROTOBUF_clientData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_clientData_2eproto();
void protobuf_AssignDesc_clientData_2eproto();
void protobuf_ShutdownFile_clientData_2eproto();

class ClientData;

// ===================================================================

class ClientData : public ::google::protobuf::Message {
 public:
  ClientData();
  virtual ~ClientData();

  ClientData(const ClientData& from);

  inline ClientData& operator=(const ClientData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientData& default_instance();

  void Swap(ClientData* other);

  // implements Message ----------------------------------------------

  ClientData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientData& from);
  void MergeFrom(const ClientData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string output_format = 1;
  inline bool has_output_format() const;
  inline void clear_output_format();
  static const int kOutputFormatFieldNumber = 1;
  inline const ::std::string& output_format() const;
  inline void set_output_format(const ::std::string& value);
  inline void set_output_format(const char* value);
  inline void set_output_format(const char* value, size_t size);
  inline ::std::string* mutable_output_format();
  inline ::std::string* release_output_format();
  inline void set_allocated_output_format(::std::string* output_format);

  // required string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // required bytes source_data = 3;
  inline bool has_source_data() const;
  inline void clear_source_data();
  static const int kSourceDataFieldNumber = 3;
  inline const ::std::string& source_data() const;
  inline void set_source_data(const ::std::string& value);
  inline void set_source_data(const char* value);
  inline void set_source_data(const void* value, size_t size);
  inline ::std::string* mutable_source_data();
  inline ::std::string* release_source_data();
  inline void set_allocated_source_data(::std::string* source_data);

  // required int32 result_code = 4;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 4;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClientData)
 private:
  inline void set_has_output_format();
  inline void clear_has_output_format();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_source_data();
  inline void clear_has_source_data();
  inline void set_has_result_code();
  inline void clear_has_result_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* output_format_;
  ::std::string* filename_;
  ::std::string* source_data_;
  ::google::protobuf::int32 result_code_;
  friend void  protobuf_AddDesc_clientData_2eproto();
  friend void protobuf_AssignDesc_clientData_2eproto();
  friend void protobuf_ShutdownFile_clientData_2eproto();

  void InitAsDefaultInstance();
  static ClientData* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientData

// required string output_format = 1;
inline bool ClientData::has_output_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientData::set_has_output_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientData::clear_has_output_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientData::clear_output_format() {
  if (output_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_->clear();
  }
  clear_has_output_format();
}
inline const ::std::string& ClientData::output_format() const {
  // @@protoc_insertion_point(field_get:ClientData.output_format)
  return *output_format_;
}
inline void ClientData::set_output_format(const ::std::string& value) {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  output_format_->assign(value);
  // @@protoc_insertion_point(field_set:ClientData.output_format)
}
inline void ClientData::set_output_format(const char* value) {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  output_format_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientData.output_format)
}
inline void ClientData::set_output_format(const char* value, size_t size) {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  output_format_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientData.output_format)
}
inline ::std::string* ClientData::mutable_output_format() {
  set_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    output_format_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientData.output_format)
  return output_format_;
}
inline ::std::string* ClientData::release_output_format() {
  clear_has_output_format();
  if (output_format_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = output_format_;
    output_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientData::set_allocated_output_format(::std::string* output_format) {
  if (output_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_format_;
  }
  if (output_format) {
    set_has_output_format();
    output_format_ = output_format;
  } else {
    clear_has_output_format();
    output_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientData.output_format)
}

// required string filename = 2;
inline bool ClientData::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientData::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientData::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientData::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& ClientData::filename() const {
  // @@protoc_insertion_point(field_get:ClientData.filename)
  return *filename_;
}
inline void ClientData::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:ClientData.filename)
}
inline void ClientData::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientData.filename)
}
inline void ClientData::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientData.filename)
}
inline ::std::string* ClientData::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientData.filename)
  return filename_;
}
inline ::std::string* ClientData::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientData::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientData.filename)
}

// required bytes source_data = 3;
inline bool ClientData::has_source_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientData::set_has_source_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientData::clear_has_source_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientData::clear_source_data() {
  if (source_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_data_->clear();
  }
  clear_has_source_data();
}
inline const ::std::string& ClientData::source_data() const {
  // @@protoc_insertion_point(field_get:ClientData.source_data)
  return *source_data_;
}
inline void ClientData::set_source_data(const ::std::string& value) {
  set_has_source_data();
  if (source_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_data_ = new ::std::string;
  }
  source_data_->assign(value);
  // @@protoc_insertion_point(field_set:ClientData.source_data)
}
inline void ClientData::set_source_data(const char* value) {
  set_has_source_data();
  if (source_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_data_ = new ::std::string;
  }
  source_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClientData.source_data)
}
inline void ClientData::set_source_data(const void* value, size_t size) {
  set_has_source_data();
  if (source_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_data_ = new ::std::string;
  }
  source_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClientData.source_data)
}
inline ::std::string* ClientData::mutable_source_data() {
  set_has_source_data();
  if (source_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    source_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClientData.source_data)
  return source_data_;
}
inline ::std::string* ClientData::release_source_data() {
  clear_has_source_data();
  if (source_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = source_data_;
    source_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClientData::set_allocated_source_data(::std::string* source_data) {
  if (source_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_data_;
  }
  if (source_data) {
    set_has_source_data();
    source_data_ = source_data;
  } else {
    clear_has_source_data();
    source_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientData.source_data)
}

// required int32 result_code = 4;
inline bool ClientData::has_result_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientData::set_has_result_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientData::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientData::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 ClientData::result_code() const {
  // @@protoc_insertion_point(field_get:ClientData.result_code)
  return result_code_;
}
inline void ClientData::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:ClientData.result_code)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clientData_2eproto__INCLUDED
