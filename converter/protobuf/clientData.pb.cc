// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "clientData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ClientData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_clientData_2eproto() {
  protobuf_AddDesc_clientData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "clientData.proto");
  GOOGLE_CHECK(file != NULL);
  ClientData_descriptor_ = file->message_type(0);
  static const int ClientData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientData, output_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientData, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientData, source_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientData, result_code_),
  };
  ClientData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientData_descriptor_,
      ClientData::default_instance_,
      ClientData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_clientData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientData_descriptor_, &ClientData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_clientData_2eproto() {
  delete ClientData::default_instance_;
  delete ClientData_reflection_;
}

void protobuf_AddDesc_clientData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020clientData.proto\"_\n\nClientData\022\025\n\routp"
    "ut_format\030\001 \002(\t\022\020\n\010filename\030\002 \002(\t\022\023\n\013sou"
    "rce_data\030\003 \002(\014\022\023\n\013result_code\030\004 \002(\005", 115);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clientData.proto", &protobuf_RegisterTypes);
  ClientData::default_instance_ = new ClientData();
  ClientData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_clientData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_clientData_2eproto {
  StaticDescriptorInitializer_clientData_2eproto() {
    protobuf_AddDesc_clientData_2eproto();
  }
} static_descriptor_initializer_clientData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientData::kOutputFormatFieldNumber;
const int ClientData::kFilenameFieldNumber;
const int ClientData::kSourceDataFieldNumber;
const int ClientData::kResultCodeFieldNumber;
#endif  // !_MSC_VER

ClientData::ClientData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientData)
}

void ClientData::InitAsDefaultInstance() {
}

ClientData::ClientData(const ClientData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClientData)
}

void ClientData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  output_format_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientData::~ClientData() {
  // @@protoc_insertion_point(destructor:ClientData)
  SharedDtor();
}

void ClientData::SharedDtor() {
  if (output_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete output_format_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (source_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_data_;
  }
  if (this != default_instance_) {
  }
}

void ClientData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientData_descriptor_;
}

const ClientData& ClientData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_clientData_2eproto();
  return *default_instance_;
}

ClientData* ClientData::default_instance_ = NULL;

ClientData* ClientData::New() const {
  return new ClientData;
}

void ClientData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_output_format()) {
      if (output_format_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        output_format_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_source_data()) {
      if (source_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_data_->clear();
      }
    }
    result_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string output_format = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_format().data(), this->output_format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "output_format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (tag == 18) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source_data;
        break;
      }

      // required bytes source_data = 3;
      case 3: {
        if (tag == 26) {
         parse_source_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_source_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result_code;
        break;
      }

      // required int32 result_code = 4;
      case 4: {
        if (tag == 32) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientData)
  return false;
#undef DO_
}

void ClientData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientData)
  // required string output_format = 1;
  if (has_output_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_format().data(), this->output_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_format(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // required bytes source_data = 3;
  if (has_source_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->source_data(), output);
  }

  // required int32 result_code = 4;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->result_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientData)
}

::google::protobuf::uint8* ClientData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClientData)
  // required string output_format = 1;
  if (has_output_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_format().data(), this->output_format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "output_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_format(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required bytes source_data = 3;
  if (has_source_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->source_data(), target);
  }

  // required int32 result_code = 4;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->result_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientData)
  return target;
}

int ClientData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string output_format = 1;
    if (has_output_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_format());
    }

    // required string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required bytes source_data = 3;
    if (has_source_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->source_data());
    }

    // required int32 result_code = 4;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientData::MergeFrom(const ClientData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_output_format()) {
      set_output_format(from.output_format());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_source_data()) {
      set_source_data(from.source_data());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientData::CopyFrom(const ClientData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientData::Swap(ClientData* other) {
  if (other != this) {
    std::swap(output_format_, other->output_format_);
    std::swap(filename_, other->filename_);
    std::swap(source_data_, other->source_data_);
    std::swap(result_code_, other->result_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientData_descriptor_;
  metadata.reflection = ClientData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
